---
title: "Case Study Part 1: Exploration and Basis Expansion"
format:
    html:
      toc: true
author: "Edward Gunning"
---



# Set Up and Data Import

## Packages


```{r packages, message=FALSE, warning = FALSE}
library(tidyverse)  # CRAN v1.3.1 
library(data.table) # CRAN v1.14.2
library(fda)        # CRAN v5.5.1        
```


## Load Custom Functions


```{r plotting functions}
source(here::here("functions", "theme_gunning.R"))
source(here::here("functions", "functional_boxplot_gg.R"))
theme_gunning()
```


## Read in Data


```{r}
# Read in from storage:
GRF_dataset_PRO_meta <- readRDS(file = here::here("chapter-06",
                                                  "data",
                                                  "GRF_dataset_PRO_meta.rds"))
```


## Plot a Sample of Curves


```{r}
# ggplot requires reshaping data from wide to long.
# do reshaping with data.table because it's a little easier
# and then continue to use data.table for a little while!
GRF_dataset_PRO_meta <- data.table(GRF_dataset_PRO_meta)
GRF_dataset_PRO_meta_long <- melt.data.table(GRF_dataset_PRO_meta,
                measure.vars = paste0("time_", 0:100),
                variable.name = "time",
                value.name = "force")
GRF_dataset_PRO_meta_long[, time := as.numeric(stringr::str_remove(time, "time_"))]
GRF_dataset_PRO_meta_long[, obs_id := paste(SUBJECT_ID, SESSION_ID, TRIAL_ID, sep = "_")]
```

```{r}
# Take Sample of Observations
set.seed(1)
random_sample_ids <- sample(unique(GRF_dataset_PRO_meta_long$obs_id), size = 100)
GRF_dataset_PRO_meta_long_sample <- GRF_dataset_PRO_meta_long[obs_id %chin% random_sample_ids]

# Rename Factor Labels for Plot:
GRF_dataset_PRO_meta_long_sample[, side := fifelse(side=="left", "Left Side", "Right Side")]
GRF_dataset_PRO_meta_long_sample[, component := factor(component,
                                                  levels = c("vertical", "anterior_posterior", "medio_lateral"),
                                                  labels = c("Vertical", "Anterior-Posterior", "Medio-Lateral"))]
# Make Plot:
 ggplot(data = GRF_dataset_PRO_meta_long_sample) +
  aes(x = time, y = force,
      group = obs_id,
      colour = interaction(component, side)) +
  facet_grid(component ~ side, scales = "free_y") +
  geom_line(alpha = 0.75) +
  labs(x = "Normalised Time",
       y = "Force (BW)",
       title = "GaitRec Ground Reaction Force Dataset",
       subtitle = "A Random Sample of 100 Observations") +
  theme(legend.position = "none",
        plot.subtitle = element_text(size = 10, hjust = 0.5))
```


# Basis Expansion/ Interpolation

Loop through and try different basis sizes (different values of $K$).


```{r}
k_seq <- seq(15, 80, by = 5)
SSE_vec <- vector("numeric", length = length(k_seq))
y <- t(GRF_dataset_PRO_meta[, paste0("time_", 0:100)])
SSE_mat <- matrix(NA, nrow = ncol(y), ncol = length(k_seq))
for(k in seq_along(k_seq)) {
  # loop through different values of k
  print(paste("iteration", k, "of", length(k_seq)))
  bspl_k <- create.bspline.basis(rangeval = c(0, 100), nbasis = k_seq[k], norder = 4)
  GRF_dataset_PRO_meta_smooth_basis <- smooth.basis(argvals = 0:100,
                                                    y = y,
                                                    fdParobj = bspl_k)
  yhat <- predict(GRF_dataset_PRO_meta_smooth_basis)
  SSE_mat[,k] <- apply((y - yhat)^2, 2, sum) # calculate (discrete approx. to) integrated squared error
}


boxplot(sqrt(SSE_mat),
        names = k_seq,
        xlab = "Number of Basis Functions",
        ylab = "Root SSE",
        main = "Approximation Error from Interpolation")
abline(v = which(k_seq==35), lwd = 3, col = "green4")
```


Choose $K=35$ basis functions and plot some fits:


```{r, fig.asp = 0.33, fig.width = 10}
# Do basis representation: ------------------------------------------------
bspl_35 <- create.bspline.basis(rangeval = c(0, 100), nbasis = 35, norder = 4)
GRF_dataset_PRO_meta_smooth_basis <- smooth.basis(argvals = 0:100,
                                                  y = y,
                                                  fdParobj = bspl_35)
yhat <- predict(GRF_dataset_PRO_meta_smooth_basis)
sample_inds <- sample(seq_len(ncol(y)/3), size = 3)

par(mfrow = c(1, 3))
# Vertical:
matplot(x = 0:100,
        y = y[, GRF_dataset_PRO_meta$component=="vertical"][, sample_inds],
        col = alpha(1:3, 0.5), 
        xlab = "Normalised Time",
        ylab = "Force (BW)",
        pch = 20)
matlines(x = 0:100,
        y = y[, GRF_dataset_PRO_meta$component=="vertical"][, sample_inds],
        lty = 1)
title("Vertical")

# A-P
matplot(x = 0:100,
        y = y[, GRF_dataset_PRO_meta$component=="anterior_posterior"][, sample_inds],
        col = alpha(1:3, 0.5), 
        xlab = "Normalised Time",
        ylab = "Force (BW)",
        pch = 20)
matlines(x = 0:100,
        y = y[, GRF_dataset_PRO_meta$component=="anterior_posterior"][, sample_inds],
        lty = 1)
title("Anterior-Posterior")

# M-L:
matplot(x = 0:100,
        y = y[, GRF_dataset_PRO_meta$component=="medio_lateral"][, sample_inds],
        col = alpha(1:3, 0.5), 
        xlab = "Normalised Time",
        ylab = "Force (BW)",
        pch = 20)
matlines(x = 0:100,
        y = y[, GRF_dataset_PRO_meta$component=="medio_lateral"][, sample_inds],
        lty = 1)
title("Medio-Lateral")


```


Append the calculated basis coefficients to our data matrix so we can use them later:


```{r}
GRF_dataset_PRO_meta_basis_coefs <- t(GRF_dataset_PRO_meta_smooth_basis$fd$coefs)
GRF_dataset_PRO_meta <- cbind(GRF_dataset_PRO_meta,
                              t(GRF_dataset_PRO_meta_smooth_basis$fd$coefs))
```


# Visualisation: Functional Boxplot

## Standard Version 

For exploratory data analysis, construct functional boxplots using the `boxplot.fd()` (or `fbplot()`) function.


```{r, fig.asp=0.33, fig.width=8}
# Split into vertical, medio_lateral and anterior_posterior components
# for function boxplots.
GRF_dataset_PRO_meta_V <- GRF_dataset_PRO_meta[component=="vertical"]
GRF_dataset_PRO_meta_V_fd <- fd(coef = t(as.matrix(GRF_dataset_PRO_meta_V[, paste0("bspl4.", 1:35)])),
                                basisobj = bspl_35)

GRF_dataset_PRO_meta_ML <- GRF_dataset_PRO_meta[component=="medio_lateral"]
GRF_dataset_PRO_meta_ML_fd <- fd(coef = t(as.matrix(GRF_dataset_PRO_meta_ML[, paste0("bspl4.", 1:35)])),
                                 basisobj = bspl_35)

GRF_dataset_PRO_meta_AP <- GRF_dataset_PRO_meta[component=="anterior_posterior"]
GRF_dataset_PRO_meta_AP_fd <- fd(coef = t(as.matrix(GRF_dataset_PRO_meta_AP[, paste0("bspl4.", 1:35)])),
                                 basisobj = bspl_35)

par(mfrow = c(1, 3))
p1 <- fda::boxplot.fd(GRF_dataset_PRO_meta_V_fd,
                      xlab = "Normalised Time",
                      ylab = "Force (BW)",
                      main = "Vertical")
p2 <- fda::boxplot.fd(GRF_dataset_PRO_meta_AP_fd,
                      xlab = "Normalised Time",
                      ylab = "Force (BW)",
                      main = "Anterior-Posterior")
p3 <- fda::boxplot.fd(GRF_dataset_PRO_meta_ML_fd,
                      xlab = "Normalised Time",
                      ylab = "Force (BW)",
                      main = "Medio-lateral")
```



## (Experimental) `ggplot()` Version

Can equivalently use a wrapper function that I've written to turn these into pretty `ggplot` figures for the manuscript:


```{r, fig.show='hide'}
V_fboxplot <-create_functional_boxplot_gg(time_grid = 0:100, fd_obj = GRF_dataset_PRO_meta_V_fd)$ggplot + 
  labs(title = "Vertical")
AP_fboxplot <- create_functional_boxplot_gg(time_grid = 0:100, fd_obj = GRF_dataset_PRO_meta_AP_fd)$ggplot +
  labs(title = "Anterior-Posterior")
ML_fboxplot <- create_functional_boxplot_gg(time_grid = 0:100, fd_obj = GRF_dataset_PRO_meta_ML_fd)$ggplot +
  labs(title = "Medio-Lateral")
```

```{r, fig.asp=0.33, fig.width=8}
(combined_plot <- list(V_fboxplot, AP_fboxplot, ML_fboxplot) %>%
lapply(function(x) {
         x + labs(x = "Normalised Time",
                  y = "Force (BW)")
       }) %>%
  ggpubr::ggarrange(plotlist = ., ncol = 3 , nrow = 1))
```


# Session Information (Reproducibility)


```{r}
sessionInfo()
```

